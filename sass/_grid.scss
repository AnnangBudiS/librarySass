@use "sass:math";

$grid-column: 12;
$grid-gap: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
    "4": 40px,
    "5": 50px,
);

//justify
$justify : flex-start, flex-end, center, space-between, space-around;

//base layout classes;
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

//justify content classes 
@each $val in $justify {
    .justify-#{$val} {
        justify-content: $val;
    }
}

//grid gap

@each $key, $val in $grid-gap {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

//col classes 

@include xs {
    @for $i from 1 through $grid-column {
        .col-xs-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};

@include sm {
    @for $i from 1 through $grid-column {
        .col-sm-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};

@include md {
    @for $i from 1 through $grid-column {
        .col-md-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};

@include lg {
    @for $i from 1 through $grid-column {
        .col-lg-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};

@include xl {
    @for $i from 1 through $grid-column {
        .col-xl-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};

@include xxl {
    @for $i from 1 through $grid-column {
        .col-xxl-#{$i}{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
};
